# numpy
1. n.ravel()和np.flatten()
多维数组降为一维，前者是拷贝，后者是视图

2.np.ceil()和np.floor()
向上和向下取整

3.np.mod(x1, x2)
x1％x2 并且与除数x2具有相同的符号

4. np.fliplr()和np.flipud()
数组左右方向上每行元素翻转，列表示不变但是现实顺序变了

5. import numpy.random
random.rand() [0,1)之间一个随机浮点数  给定维度 random.rand(4，2)
random.randn(4,2) 正态分布
random.randint(1,10) 随机整数 [1,10)
random.uniform(x,y)   在[x,y]间随机生成一个实数
random.choice(sequence) 随机选择一个
radnom.shuffle(sequence) 随机打乱
random.sample(sequence, k) 随机选择k个返回
random.seed() 随机数可预测

6. np.bincount()
# 我们可以看到x中最大的数为7，因此bin的数量为8，那么它的索引值为0->7
x = np.array([0, 1, 1, 3, 2, 1, 7])
# 索引0出现了1次，索引1出现了3次......索引5出现了0次......
np.bincount(x)
#因此，输出结果为：array([1, 3, 1, 1, 0, 0, 0, 1])

7. np.interp(x, xp, fp) 线性插值
xp横坐标 fp纵坐标
x是要插值的横坐标
返回插值的纵坐标

8. torch.narrow()
tensor([[ 1.2474,  0.1820, -0.0179],
        [ 0.1388, -1.7373,  0.5934],
        [ 0.2288,  1.1102,  0.6743]])
x.narrow(0, 1, 2) # 行切片 0维度,从1开始，长度2
tensor([[ 0.1388, -1.7373,  0.5934],
        [ 0.2288,  1.1102,  0.6743]])

9. torch.unbind()
返回指定维度切片后的元祖
tensor([[ 1.2474,  0.1820, -0.0179],
        [ 0.1388, -1.7373,  0.5934],
        [ 0.2288,  1.1102,  0.6743]])
torch.unbind(x, 1) # 按维度1进行切片
(tensor([1.2474, 0.1388, 0.2288]),
 tensor([ 0.1820, -1.7373,  1.1102]),
 tensor([-0.0179,  0.5934,  0.6743]))

10. torch.cdist() 计算两个张量的欧几里得距离
# p=1曼哈顿距离 各个向量的绝对值之和
# p=2欧几里得距离
p1 = torch.tensor([[0.0, 0.0], [1.0, 1.0]])
    p2 = torch.tensor([[0.0, 0.0], [-1.0, -1.0]])
    p = torch.cdist(p1, p2, p=2.0)
    print(p)
tensor([[0.0000, 1.4142],
        [1.4142, 2.8284]])

11. 两大转置函数transpose()和permute()
torch.transpose(input, 默认维度0， 默认维度1)
input.permute(要传入所有维度)




